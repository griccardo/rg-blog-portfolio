import { c as createComponent, r as renderTemplate, m as maybeRenderHead, u as unescapeHTML } from './astro/server_Clh-S9fL.mjs';
import 'kleur/colors';
import 'clsx';

const html = "<p>Chi lavora quotidianamente con WordPress sa quanto possa diventare disordinato scrivere codice PHP mischiato all’HTML nei file del tema. Appena il progetto si complica, anche leggermente, mantenere un template leggibile e scalabile diventa una sfida. È qui che entrano in gioco Timber e Twig, una combinazione che può rivoluzionare il modo in cui scriviamo temi WordPress.</p>\n<h2 id=\"cosè-timber-e-twig\">Cos’è Timber (e Twig)?</h2>\n<p>Timber è un plugin per WordPress che permette di separare in modo più pulito la logica PHP dalla presentazione HTML, utilizzando Twig, un motore di templating moderno e leggibile (originariamente sviluppato da Symfony). In parole semplici: Twig è una sintassi pulita per scrivere template, e Timber ci aiuta a integrare questa sintassi dentro WordPress.</p>\n<h2 id=\"vantaggi-concreti\">Vantaggi concreti</h2>\n<h3 id=\"leggibilità-e-organizzazione-del-codice\">Leggibilità e organizzazione del codice</h3>\n<p>Utilizzare Timber e Twig nello sviluppo WordPress porta con sé numerosi benefici, soprattutto in termini di ordine e chiarezza del codice. Il primo aspetto evidente è la separazione tra logica e presentazione: con il metodo classico, i file dei template contengono spesso un mix disordinato di PHP e HTML, rendendo difficile la lettura e la manutenzione. Timber consente di isolare la logica in file PHP separati e di affidare tutta la parte di markup a Twig, un linguaggio di templating estremamente leggibile.</p>\n<h3 id=\"miglioramento-della-produttività\">Miglioramento della produttività</h3>\n<p>Un altro vantaggio importante è proprio la sintassi di Twig. Rispetto al codice PHP puro, Twig è più chiaro, semplice e vicino al modo in cui si scrivono template nei framework moderni. Le condizioni, i cicli e l’output delle variabili si leggono come frasi naturali, e chi ha familiarità con Blade, Vue o Symfony si sentirà immediatamente a suo agio.</p>\n<h3 id=\"reusabilità-e-modularità\">Reusabilità e modularità</h3>\n<p>Timber permette anche di costruire template riutilizzabili e strutturati secondo i principi DRY (Don’t Repeat Yourself). Con Twig si possono definire template base ed estenderli nei file specifici delle singole pagine, includere componenti parziali, e organizzare il codice in modo modulare. Questo porta a una riduzione del codice duplicato e facilita le modifiche globali al layout.</p>\n<h3 id=\"gestione-dei-dati\">Gestione dei dati</h3>\n<p>Infine, Timber lavora molto bene con dati strutturati, come i campi personalizzati di ACF, i custom post type e i loop avanzati. Tutti questi contenuti vengono trasformati in oggetti e array facilmente accessibili da Twig, migliorando l’organizzazione dei dati e riducendo il rischio di errori.</p>\n<h2 id=\"esempio-pratico\">Esempio pratico</h2>\n<p>Le differenze tra il metodo classico e quello con Timber sono evidenti in un semplice esempio. Supponiamo di avere un template per un archivio di un blog, che contiene un loop per visualizzare i post.</p>\n<h3 id=\"metodo-classico\">Metodo classico</h3>\n<p>Nel tema classico, il ciclo per mostrare un elenco di post è scritto così, tipicamente all’interno di un file come index.php o archive.php:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#F97583\">&#x3C;?</span><span style=\"color:#79B8FF\">php</span><span style=\"color:#F97583\"> if</span><span style=\"color:#E1E4E8\"> ( </span><span style=\"color:#B392F0\">have_posts</span><span style=\"color:#E1E4E8\">() ) </span><span style=\"color:#F97583\">:</span><span style=\"color:#F97583\"> ?></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  &#x3C;</span><span style=\"color:#79B8FF\">ul</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    &#x3C;?</span><span style=\"color:#79B8FF\">php</span><span style=\"color:#F97583\"> while</span><span style=\"color:#E1E4E8\"> ( </span><span style=\"color:#B392F0\">have_posts</span><span style=\"color:#E1E4E8\">() ) </span><span style=\"color:#F97583\">:</span><span style=\"color:#B392F0\"> the_post</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#F97583\">?></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      &#x3C;</span><span style=\"color:#79B8FF\">li</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#79B8FF\">a</span><span style=\"color:#79B8FF\"> href</span><span style=\"color:#F97583\">=</span><span style=\"color:#9ECBFF\">\"&#x3C;?php the_permalink(); ?>\"</span><span style=\"color:#F97583\">>&#x3C;?</span><span style=\"color:#79B8FF\">php</span><span style=\"color:#B392F0\"> the_title</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#F97583\">?>&#x3C;/</span><span style=\"color:#79B8FF\">a</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">        &#x3C;</span><span style=\"color:#79B8FF\">p</span><span style=\"color:#F97583\">>&#x3C;?</span><span style=\"color:#79B8FF\">php</span><span style=\"color:#B392F0\"> the_excerpt</span><span style=\"color:#E1E4E8\">(); </span><span style=\"color:#F97583\">?>&#x3C;/</span><span style=\"color:#79B8FF\">p</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">      &#x3C;/</span><span style=\"color:#79B8FF\">li</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">    &#x3C;?</span><span style=\"color:#79B8FF\">php</span><span style=\"color:#F97583\"> endwhile</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">?></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  &#x3C;/</span><span style=\"color:#79B8FF\">ul</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">&#x3C;?</span><span style=\"color:#79B8FF\">php</span><span style=\"color:#F97583\"> else</span><span style=\"color:#F97583\"> :</span><span style=\"color:#F97583\"> ?></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">  &#x3C;</span><span style=\"color:#79B8FF\">p</span><span style=\"color:#F97583\">></span><span style=\"color:#79B8FF\">Nessun</span><span style=\"color:#79B8FF\"> contenuto</span><span style=\"color:#79B8FF\"> trovato</span><span style=\"color:#F97583\">.</span><span style=\"color:#F97583\">&#x3C;/</span><span style=\"color:#79B8FF\">p</span><span style=\"color:#F97583\">></span></span>\n<span class=\"line\"><span style=\"color:#F97583\">&#x3C;?</span><span style=\"color:#79B8FF\">php</span><span style=\"color:#F97583\"> endif</span><span style=\"color:#E1E4E8\">; </span><span style=\"color:#F97583\">?></span></span>\n<span class=\"line\"></span></code></pre>\n<p>È funzionale, ma mischia markup e logica, e diventa difficile da mantenere man mano che il markup si complica.</p>\n<h3 id=\"metodo-con-timber-e-twig\">Metodo con Timber e Twig</h3>\n<p>Con Timber, separi completamente logica e presentazione. Il PHP si occupa solo di preparare i dati, mentre Twig gestisce la visualizzazione.</p>\n<p>File PHP (es. index.php):</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">$context </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> Timber</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">context</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">$context[</span><span style=\"color:#9ECBFF\">'posts'</span><span style=\"color:#E1E4E8\">] </span><span style=\"color:#F97583\">=</span><span style=\"color:#79B8FF\"> Timber</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">get_posts</span><span style=\"color:#E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">Timber</span><span style=\"color:#F97583\">::</span><span style=\"color:#B392F0\">render</span><span style=\"color:#E1E4E8\">(</span><span style=\"color:#9ECBFF\">'index.twig'</span><span style=\"color:#E1E4E8\">, $context);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>File Twig (es. index.twig):</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"twig\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{% </span><span style=\"color:#F97583\">if</span><span style=\"color:#E1E4E8\"> posts %}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;</span><span style=\"color:#85E89D\">ul</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    {% </span><span style=\"color:#F97583\">for</span><span style=\"color:#E1E4E8\"> post </span><span style=\"color:#F97583\">in</span><span style=\"color:#E1E4E8\"> posts %}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      &#x3C;</span><span style=\"color:#85E89D\">li</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        &#x3C;</span><span style=\"color:#85E89D\">a</span><span style=\"color:#B392F0\"> href</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"{{ </span><span style=\"color:#E1E4E8\">post</span><span style=\"color:#9ECBFF\">.</span><span style=\"color:#E1E4E8\">link</span><span style=\"color:#9ECBFF\"> }}\"</span><span style=\"color:#E1E4E8\">>{{ post.title }}&#x3C;/</span><span style=\"color:#85E89D\">a</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">        &#x3C;</span><span style=\"color:#85E89D\">p</span><span style=\"color:#E1E4E8\">>{{ post.excerpt }}&#x3C;/</span><span style=\"color:#85E89D\">p</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">      &#x3C;/</span><span style=\"color:#85E89D\">li</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">    {% </span><span style=\"color:#F97583\">endfor</span><span style=\"color:#E1E4E8\"> %}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;/</span><span style=\"color:#85E89D\">ul</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">{% </span><span style=\"color:#F97583\">else</span><span style=\"color:#E1E4E8\"> %}</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">  &#x3C;</span><span style=\"color:#85E89D\">p</span><span style=\"color:#E1E4E8\">>Nessun contenuto trovato.&#x3C;/</span><span style=\"color:#85E89D\">p</span><span style=\"color:#E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">{% </span><span style=\"color:#F97583\">endif</span><span style=\"color:#E1E4E8\"> %}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>In questo modo, il codice è più pulito, facile da leggere e mantenere, e ogni parte è separata in modo chiaro.</p>\n<h2 id=\"conclusioni\">Conclusioni</h2>\n<p>Usare Timber e Twig in WordPress è un modo intelligente per portare ordine e modernità nello sviluppo di temi. Migliora la leggibilità del codice, separa chiaramente la logica dalla presentazione e rende il lavoro quotidiano più piacevole.</p>";

				const frontmatter = {"title":"Timber e Twig: migliora lo sviluppo in WordPress","pubDate":"2025-05-09T00:00:00.000Z","description":"Scopri come Timber e Twig possono migliorare lo sviluppo in WordPress, offrendo una maggiore flessibilità e produttività.","author":"Riccardo","image":{"url":"/wordpress.jpg","alt":"wordpress"},"minutesRead":"4 min read"};
				const file = "/Users/riccardogobbo/astroprjs/astro-minimal-portfolio-template/src/content/posts/timber-e-twig-per-wordpress.md";
				const url = undefined;
				function rawContent() {
					return "\nChi lavora quotidianamente con WordPress sa quanto possa diventare disordinato scrivere codice PHP mischiato all’HTML nei file del tema. Appena il progetto si complica, anche leggermente, mantenere un template leggibile e scalabile diventa una sfida. È qui che entrano in gioco Timber e Twig, una combinazione che può rivoluzionare il modo in cui scriviamo temi WordPress.\n\n## Cos’è Timber (e Twig)?\n\nTimber è un plugin per WordPress che permette di separare in modo più pulito la logica PHP dalla presentazione HTML, utilizzando Twig, un motore di templating moderno e leggibile (originariamente sviluppato da Symfony). In parole semplici: Twig è una sintassi pulita per scrivere template, e Timber ci aiuta a integrare questa sintassi dentro WordPress.\n\n## Vantaggi concreti\n\n### Leggibilità e organizzazione del codice\nUtilizzare Timber e Twig nello sviluppo WordPress porta con sé numerosi benefici, soprattutto in termini di ordine e chiarezza del codice. Il primo aspetto evidente è la separazione tra logica e presentazione: con il metodo classico, i file dei template contengono spesso un mix disordinato di PHP e HTML, rendendo difficile la lettura e la manutenzione. Timber consente di isolare la logica in file PHP separati e di affidare tutta la parte di markup a Twig, un linguaggio di templating estremamente leggibile.\n\n### Miglioramento della produttività\nUn altro vantaggio importante è proprio la sintassi di Twig. Rispetto al codice PHP puro, Twig è più chiaro, semplice e vicino al modo in cui si scrivono template nei framework moderni. Le condizioni, i cicli e l’output delle variabili si leggono come frasi naturali, e chi ha familiarità con Blade, Vue o Symfony si sentirà immediatamente a suo agio.\n\n### Reusabilità e modularità\nTimber permette anche di costruire template riutilizzabili e strutturati secondo i principi DRY (Don’t Repeat Yourself). Con Twig si possono definire template base ed estenderli nei file specifici delle singole pagine, includere componenti parziali, e organizzare il codice in modo modulare. Questo porta a una riduzione del codice duplicato e facilita le modifiche globali al layout.\n\n### Gestione dei dati\nInfine, Timber lavora molto bene con dati strutturati, come i campi personalizzati di ACF, i custom post type e i loop avanzati. Tutti questi contenuti vengono trasformati in oggetti e array facilmente accessibili da Twig, migliorando l’organizzazione dei dati e riducendo il rischio di errori.\n\n## Esempio pratico\n\nLe differenze tra il metodo classico e quello con Timber sono evidenti in un semplice esempio. Supponiamo di avere un template per un archivio di un blog, che contiene un loop per visualizzare i post. \n\n### Metodo classico\nNel tema classico, il ciclo per mostrare un elenco di post è scritto così, tipicamente all’interno di un file come index.php o archive.php:\n```php\n<?php if ( have_posts() ) : ?>\n  <ul>\n    <?php while ( have_posts() ) : the_post(); ?>\n      <li>\n        <a href=\"<?php the_permalink(); ?>\"><?php the_title(); ?></a>\n        <p><?php the_excerpt(); ?></p>\n      </li>\n    <?php endwhile; ?>\n  </ul>\n<?php else : ?>\n  <p>Nessun contenuto trovato.</p>\n<?php endif; ?>\n```\nÈ funzionale, ma mischia markup e logica, e diventa difficile da mantenere man mano che il markup si complica.\n\n### Metodo con Timber e Twig\nCon Timber, separi completamente logica e presentazione. Il PHP si occupa solo di preparare i dati, mentre Twig gestisce la visualizzazione. \n\nFile PHP (es. index.php):\n```php\n$context = Timber::context();\n$context['posts'] = Timber::get_posts();\nTimber::render('index.twig', $context);\n```\nFile Twig (es. index.twig):\n```twig\n{% if posts %}\n  <ul>\n    {% for post in posts %}\n      <li>\n        <a href=\"{{ post.link }}\">{{ post.title }}</a>\n        <p>{{ post.excerpt }}</p>\n      </li>\n    {% endfor %}\n  </ul>\n{% else %}\n  <p>Nessun contenuto trovato.</p>\n{% endif %}\n```\nIn questo modo, il codice è più pulito, facile da leggere e mantenere, e ogni parte è separata in modo chiaro.\n\n\n## Conclusioni\n\nUsare Timber e Twig in WordPress è un modo intelligente per portare ordine e modernità nello sviluppo di temi. Migliora la leggibilità del codice, separa chiaramente la logica dalla presentazione e rende il lavoro quotidiano più piacevole.";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"cosè-timber-e-twig","text":"Cos’è Timber (e Twig)?"},{"depth":2,"slug":"vantaggi-concreti","text":"Vantaggi concreti"},{"depth":3,"slug":"leggibilità-e-organizzazione-del-codice","text":"Leggibilità e organizzazione del codice"},{"depth":3,"slug":"miglioramento-della-produttività","text":"Miglioramento della produttività"},{"depth":3,"slug":"reusabilità-e-modularità","text":"Reusabilità e modularità"},{"depth":3,"slug":"gestione-dei-dati","text":"Gestione dei dati"},{"depth":2,"slug":"esempio-pratico","text":"Esempio pratico"},{"depth":3,"slug":"metodo-classico","text":"Metodo classico"},{"depth":3,"slug":"metodo-con-timber-e-twig","text":"Metodo con Timber e Twig"},{"depth":2,"slug":"conclusioni","text":"Conclusioni"}];
				}

				const Content = createComponent((result, _props, slots) => {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;

					return renderTemplate`${maybeRenderHead()}${unescapeHTML(html)}`;
				});

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, rawContent, url };
