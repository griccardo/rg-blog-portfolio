const id = "timber-e-twig-per-wordpress.md";
						const collection = "posts";
						const slug = "timber-e-twig-per-wordpress";
						const body = "\nChi lavora quotidianamente con WordPress sa quanto possa diventare disordinato scrivere codice PHP mischiato all’HTML nei file del tema. Appena il progetto si complica, anche leggermente, mantenere un template leggibile e scalabile diventa una sfida. È qui che entrano in gioco Timber e Twig, una combinazione che può rivoluzionare il modo in cui scriviamo temi WordPress.\n\n## Cos’è Timber (e Twig)?\n\nTimber è un plugin per WordPress che permette di separare in modo più pulito la logica PHP dalla presentazione HTML, utilizzando Twig, un motore di templating moderno e leggibile (originariamente sviluppato da Symfony). In parole semplici: Twig è una sintassi pulita per scrivere template, e Timber ci aiuta a integrare questa sintassi dentro WordPress.\n\n## Vantaggi concreti\n\n### Leggibilità e organizzazione del codice\nUtilizzare Timber e Twig nello sviluppo WordPress porta con sé numerosi benefici, soprattutto in termini di ordine e chiarezza del codice. Il primo aspetto evidente è la separazione tra logica e presentazione: con il metodo classico, i file dei template contengono spesso un mix disordinato di PHP e HTML, rendendo difficile la lettura e la manutenzione. Timber consente di isolare la logica in file PHP separati e di affidare tutta la parte di markup a Twig, un linguaggio di templating estremamente leggibile.\n\n### Miglioramento della produttività\nUn altro vantaggio importante è proprio la sintassi di Twig. Rispetto al codice PHP puro, Twig è più chiaro, semplice e vicino al modo in cui si scrivono template nei framework moderni. Le condizioni, i cicli e l’output delle variabili si leggono come frasi naturali, e chi ha familiarità con Blade, Vue o Symfony si sentirà immediatamente a suo agio.\n\n### Reusabilità e modularità\nTimber permette anche di costruire template riutilizzabili e strutturati secondo i principi DRY (Don’t Repeat Yourself). Con Twig si possono definire template base ed estenderli nei file specifici delle singole pagine, includere componenti parziali, e organizzare il codice in modo modulare. Questo porta a una riduzione del codice duplicato e facilita le modifiche globali al layout.\n\n### Gestione dei dati\nInfine, Timber lavora molto bene con dati strutturati, come i campi personalizzati di ACF, i custom post type e i loop avanzati. Tutti questi contenuti vengono trasformati in oggetti e array facilmente accessibili da Twig, migliorando l’organizzazione dei dati e riducendo il rischio di errori.\n\n## Esempio pratico\n\nLe differenze tra il metodo classico e quello con Timber sono evidenti in un semplice esempio. Supponiamo di avere un template per un archivio di un blog, che contiene un loop per visualizzare i post. \n\n### Metodo classico\nNel tema classico, il ciclo per mostrare un elenco di post è scritto così, tipicamente all’interno di un file come index.php o archive.php:\n```php\n<?php if ( have_posts() ) : ?>\n  <ul>\n    <?php while ( have_posts() ) : the_post(); ?>\n      <li>\n        <a href=\"<?php the_permalink(); ?>\"><?php the_title(); ?></a>\n        <p><?php the_excerpt(); ?></p>\n      </li>\n    <?php endwhile; ?>\n  </ul>\n<?php else : ?>\n  <p>Nessun contenuto trovato.</p>\n<?php endif; ?>\n```\nÈ funzionale, ma mischia markup e logica, e diventa difficile da mantenere man mano che il markup si complica.\n\n### Metodo con Timber e Twig\nCon Timber, separi completamente logica e presentazione. Il PHP si occupa solo di preparare i dati, mentre Twig gestisce la visualizzazione. \n\nFile PHP (es. index.php):\n```php\n$context = Timber::context();\n$context['posts'] = Timber::get_posts();\nTimber::render('index.twig', $context);\n```\nFile Twig (es. index.twig):\n```twig\n{% if posts %}\n  <ul>\n    {% for post in posts %}\n      <li>\n        <a href=\"{{ post.link }}\">{{ post.title }}</a>\n        <p>{{ post.excerpt }}</p>\n      </li>\n    {% endfor %}\n  </ul>\n{% else %}\n  <p>Nessun contenuto trovato.</p>\n{% endif %}\n```\nIn questo modo, il codice è più pulito, facile da leggere e mantenere, e ogni parte è separata in modo chiaro.\n\n\n## Conclusioni\n\nUsare Timber e Twig in WordPress è un modo intelligente per portare ordine e modernità nello sviluppo di temi. Migliora la leggibilità del codice, separa chiaramente la logica dalla presentazione e rende il lavoro quotidiano più piacevole.";
						const data = {title:"Timber e Twig: migliora lo sviluppo in WordPress",pubDate:new Date(1746748800000),description:"Scopri come Timber e Twig possono migliorare lo sviluppo in WordPress, offrendo una maggiore flessibilità e produttività.",author:"Riccardo",image:{url:"/wordpress.jpg",alt:"wordpress"}};
						const _internal = {
							type: 'content',
							filePath: "/Users/riccardogobbo/astroprjs/astro-minimal-portfolio-template/src/content/posts/timber-e-twig-per-wordpress.md",
							rawData: undefined,
						};

export { _internal, body, collection, data, id, slug };
